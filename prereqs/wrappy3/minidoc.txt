===================================================
wrappy - a Python wrapper generator for C++ classes
===================================================

.. |NAME| replace:: *name*
.. |CXXNAME| replace:: *C++ name*
.. |FILENAME| replace:: *filename*
.. |OTHERARG| replace:: *otherarg*

:Author:

	Greg Couch

:Email:

	gregc@cgl.ucsf.edu

:Lab:

	UCSF Computer Graphics Lab

:Copyright:

	Copyright (c) 1996-2005 The Regents of the University of California.
	All rights reserved.

	Redistribution and use in source and binary forms are permitted
	provided that the above copyright notice and this paragraph are
	duplicated in all such forms and that any documentation,
	distribution and/or use acknowledge that the software was developed
	by the Computer Graphics Laboratory, University of California,
	San Francisco.  The name of the University may not be used to
	endorse or promote products derived from this software without
	specific prior written permission.

	THIS SOFTWARE IS PROVIDED "AS IS" AND WITHOUT ANY EXPRESS OR
	IMPLIED WARRANTIES, INCLUDING, WITHOUT LIMITATION, THE IMPLIED
	WARRANTIES OF MERCHANTIBILITY AND FITNESS FOR A PARTICULAR PURPOSE.
	IN NO EVENT SHALL THE REGENTS OF THE UNIVERSITY OF CALIFORNIA BE
	LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY,
	OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE USE OF THIS SOFTWARE.


Overview
========

	wrappy is designed to read annotated C++ header files and
	generate a Python C module with classes and functions for the
	C++ classes and functions found.  Header file annotations are
	used extensively to control whether and how a C++ class is
	wrapped and C++ object lifetime management.

	wrappy's general philosophy is to get as much Python behavior
	out of C++ code as possible.  C++ exceptions are mapped to
	Python exceptions.  C++ default function arguments become
	Python keyword arguments.  C++ accessor member functions are
	converted to Python properties.  C++ ``enum``\ s are converted
	to a subclass of Python ``int``\ s.  C++ numeric types with
	overloaded operators are overloaded in Python.  Some C++-isms
	that are possible in Python, but aren't present in idiomatic
	Python, like static member functions, are kept as static member
	functions.

	For simplicity, C++ standard containers are converted in their
	entirety to Python containers (*e.g.,* map -> dict, vector ->
	list, set -> set, *etc.*).  Analogously, all iterator ranges are
	expanded.  This has the advantage of minimizing the conversion
	time and enabling code in each language to operate at full
	speed, but with the cost of using additional memory.  It also
	means that it is a good idea to use local variables to cache
	results of functions and instance attributes.


Command Line Options
====================

	-e tag		Put the given tag before every exportable symbol in
			the generated header files.  The tag is used for Windows
			OSes dynamic libraries.
	-h file		Add extra header file to module.h (may be repeated).
	-i token	Ignore token (*e.g.*, a tag from a different module).
	-m module-name	Name of the Python module generated.
	-n		Don't generate any output, just check the input file(s).
	-N namespace	Place the generated code (except for init module!)
			into the given namespace.
	-s class-name	Generate code for a single class.  The special name
			__module__ can be given to get the module level code.
	-w		Turn on warnings about get/set attribute types not
			matching.  Not all mismatches are errors.

C++ Coverage
============

	Wrappy parses C++ as simply as it can.  Consequently, some
	legal C++ header files can not be parsed correctly.

	* Global/namespace variables are recognized but not supported.
	* All function arguments must have a name (helps simplify parsing).
	* C++ default function arguments can be given as Python keyword
	  arguments.  The argument name is used as the Python argument
	  keyword.
	* Overloaded functions are supported, but default arguments
	  are ignored when distinguishing between overloaded functions.
	* Only one declaration per type (*e.g.*, no ``int x, y;``).
	* No combination typedef and struct declaration
	  (*i.e.*, separate ``typedef struct _t { ... } T;`` into
	  ``struct _t { ... };`` and ``typedef struct _t T;``)
	* No ``using namespace ``|NAME|``;`` (other uses of ``using``
	  are okay).

	The following restrictions are bugs:

	* Virtual functions repeated in subclasses will generate
	  another entry point in the subclass.
	* Private base classes become public in Python.
	* Templates are not supported.

Generated Python Types
======================

	With Python 2.2's unifying of Python types and classes, and the
	additional changes present in Python 2.3 and 2.4 (a bool type,
	other C API changes), only Python types are generated, *a.k.a.*
	new-style classes.

	The Python types mimic the C++ behavior as much as possible.
	In particular, operator overloads, static member functions,
	copy constructors, constructors, destructors.  In general, the
	private parts of a class are ignored, except where they impact
	the API -- for instance, private destructors, copy
	constructors, and assignment operators are important for wrappy
	to know about.  Unlike C++, a Python class can not have a method
	and a static method with the same name.  In that case, the static
	method is skipped.

	By default, simple C++ classes (not a base class nor a subclass
	and have a public copy constructor) have their instances wholly
	contained in the in the Python type instance (an embedded class).
	Thus the lifetime of the C++ object is the same as the lifetime
	of the Python instance it is in.

Python Modules
==============

	The name of the Python module defaults to being the same as the
	first C++ namespace found (unless overriden on the command
	line).  Classes in other C++ namespaces are assumed to be in
	other Python modules unless annotated otherwise.

Attributes
==========

	C++ class public member variables are made into Python
	class/type attributes.

	C++ class static methods are class methods, static constants
	are class attributes, and (bug) static variables are effectively
	class constant attributes.

	Paired class member functions are collapsed into Python
	attributes as well: [Gg]etNAME/[Ss]etNAME creates an NAME
	attribute.  Likewise for NAME/[Ss]etNAME.

	If you have only one half of the paired member functions, it
	can still be an attribute if it annotated as such (see below).

Annotations
===========

	All annotations are placed in C/C++ comments.

Scoped Annotations
------------------

	The following annotations can be found in any C++ scope (global,
	namespace, or class) and are restricted to that scope.

	``// #include`` |FILENAME|
		Use |FILENAME| as include file for definitions in the
		current scope instead of the current file being read.

	``// PYMODULE:`` |NAME|
		All definitions the current scope are found in the
		|NAME|\ d Python module.  Python module names default
		to the current top-level namespace's name.
		*Not implemented.*

	``// PYNAME:`` |NAME| |CXXNAME|
		If |CXXNAME| is missing, rename the next C++ symbol to
		the given Python |NAME|, otherwise name the given
		|CXXNAME|.  Special Python names (*e.g.*, ``__add__``)
		can be used to use a C++ function instead of the default
		(*e.g.*, ``operator+``).
		*Not implemented.*

	``// TEXT:`` |NAME|
		Start of multiline tagged text for scope.  The contents
		follows as further comments.  The end of the text is the
		end of the scope or the ``END_TEXT`` annotation.  Commom
		tag |NAME|\ s are ``doc`` for documentation, ``copyright``
		for copyright information, ``version`` for version
		information, and ``author`` for the author and are saved
		in ``__doc__``, ``__copyright__``, ``__author__`` and
		``__version__`` respectively.  Conflicts with Python
		special method names are *not* prevented.
		*Not implemented.*

	``// END_TEXT``
		End of text tag.
		*Not implemented.*

	``// FACTORY:`` |NAME|
		Objects, returned by |NAME|\ d function, lifetimes are
		controlled by Python.
		*Not implemented.*

	``// ALLOW THREADS:`` |NAME|
		Wrap the call to the |NAME|\ d function inside a
		Py_BEGIN_ALLOW_THREADS/Py_END_ALLOW_THREADS pair.
		Thus releasing the Python global interpreter lock
		so other threads can run.  The |NAME|\ d function
		must not call *any* Python functions without first
		reacquiring the Python GIL.

C++ Class Annotations
---------------------

	See also the scoped annotations.

	``// IMPLICIT COPY CONSTRUCTOR``
		Tells wrappy that if a copy constructor is not present
		to assume that the compiler would generate one anyway.
		This is needed because it is too hard to tell if all
		bases classes and all member variables are copyable.
		Classes that are publically copyable (and not subclassed
		from wrappy::Obj) are embedded in the corresponding
		Python type.  See ``SEPARATE`` below.

	``// IDENTITY HASH``
		Embedded classes (by value) are generally mutable and are
		not hashable by default.  This annotation tells wrappy to
		generate a hash function based on the id of the object.

	``// WRAP CLASS``
		Generate a Python type for this C++ class even though
		it is in another namespace.

	``// FINAL``
		Not extensible (*ala* java).  Treat all members as if
		there were a Python slots declaration.  This only works
		for classes that are neither base classes nor subclasses.
		And, for now, have no attributes that need reference caching.

	``// SEPARATE``
		Keep instance of C++ class separate from corresponding
		Python type instance.  This is implicit for C++ classes
		that are subclassed from wrappy::Obj.  The C++ instance's
		lifetime is potentially independent of the corresponding
		Python type instance.

	``// STRUCT SEQUENCE``
		Generate a Python structsequence type for this C++ class.
		Used for C++ structs that whose attributes can be accessed
		by position (like a tuple) or by name.  Not extensible.
		*Not implemented.*

	``// ABSTRACT``
		Create a Python type for this class, but don't allow
		for instances to be created.  This allows C++ function
		arguments and return values to be of this class, with
		the corresponding Python instances to be of the appropriate
		subclass.  Designed for C++ abstract base classes so
		Python type hierarchy mirrors C++ class hierarchy.
		This annotation is not needed if there are any pure virtual
		functions visible.

	``// BASE CLASS``
		Not needed for classes that are subclassed in the same
		module.

	``// NUMBER METHODS``
		Generate Python interface for numerical operators.  Reverse
		argument variations are also found:

			__add__:	operator+
			__sub__:	operator-
			__mul__:	operator*
			__div__:	operator/
			__mod__:	operator%
			__divmod__:	NA
			__pow__:	NA
			__neg__:	unary operator-
			__pos__:	unary operator+
			__abs__:	NA
			__nonzero__:	operator! or operator bool
			__invert__:	operator~
			__lshift__:	operator<<
			__rshift__:	operator>>
			__and__:	operator&
			__xor__:	operator^
			__or__:		operator|
			__int__:	operator int
			__int__:	operator long
			__int__:	operator float
			__oct__:	NA
			__hex__:	NA

			__iadd__:	operator+=
			__isub__:	operator-=
			__imul__:	operator*=
			__idiv__:	operator/=
			__imod__:	operator%=
			__ipow__:	NA
			__ilshift__:	operator<<=
			__irshift__:	operator>>=
			__iand__:	operator&=
			__ixor__:	operator^=
			__ior__:	operator|=

			__floordiv__:	NA
			__truediv__:	NA
			__ifloordiv__:	NA
			__itruediv__:	NA

	``// SEQUENCE METHODS``
		Generate Python interface for::

			__add__:	operator+
			__contains__:	.find or std::find
			__delitem__:	NA
			__delslice__:	NA
			__getitem__:	at(size_t) ?const
				or:	operator[](size_t) ?const
			__getslice__:	NA
			__iadd__:	operator+=
			__imull__:	operator*=
			__lt__:		?
			__len__:	unsigned int size() const
				or:	unsigned int length() const
				or:	size_t size() const
				or:	size_t length() const
			__mul__:	operator*
			__rmul__:	NA
			__setitem__	&at(size_t)
				or:	&operator[](size_t)
			__setslice__	NA
			__str__:	operator<<(ostream&, T)

	``// MAPPING METHODS``
		Generate Python interface for::
		
			__delitem__:	NA
			__getitem__:	operator[](?) ?const
			__len__:	unsigned int size() const
				or:	unsigned int length() const
				or:	size_t size() const
				or:	size_t length() const
			__setitem__:	&operator[](?)

	``// BUFFER PROCS``
		*Recognized but not implemented.*

	``// DON'T CACHE``
		Don't cache attribute references to this C++ class.
		This means that pointers to this class that are in
		other classes are actually back pointers.  Use the
		the ``WEAKREF`` attribute annotation for finer
		control.

Attribute Annotations
---------------------

	These annotations also go in the C++ class definition.

	``// ATTRIBUTE:`` |NAME|
		Make the corresponding get/set function to |NAME|
		an attribute.  (Not needed if both a get and a
		set function are present.)

	``// READONLY:`` |NAME|
		Ignore the set function for |NAME|\ d attribute.

	``// WRITEONLY:`` |NAME|
		Ignore the get function for |NAME|\ d attribute.

	``// WEAKREF:`` |NAME|
		Don't cache references for |NAME|\ d attribute.

Function Argument Annotations
-----------------------------

	Typically, these annotations are placed in the argument list
	as C-style comments so they be placed inline.  Arguments that
	are used to return values must be annotated.

	``/*NULL_OK*/``
		This argument is can be NULL (None in Python).
		This is implicitly true if the argument has a default
		value of NULL.  Otherwise, pointer arguments can not
		be NULL.

	``/*IN*/``
		This argument is input to the function (default).

	``/*OUT*/``
		This argument is output from the function.

	``/*INOUT*/``
		This argument is used for input to and output from
		the function.

	``/*LEN``\ *n*\ ``:`` |OTHERARG| ``*/``
		Argument is an array length for another argument.  
		Example::

			float matrix[xlen][ylen];

			void func(float *matrix, /*LEN0: matrix */ int xlen, /*LEN1: matrix */ int ylen)

		*Recognized but not implemented.*


C Language preprocessor
=======================

	wrappy understands that it should ignore declarations within:

		``#ifndef WrapPy``
	
	or
		``#if 0``

	and ending with an ``#else`` clause or ``#endif``\ .  All of the
	declarations inside the ``#if``\ \*/(\ ``#else``\ \|\ ``#endif``\ ) must parse.
	``#elif`` clauses are recognized, but not recommended, because the
	contents of all clauses are added to the parsed declarations.

	Nested ``#if``\ \*'s are recognized.


Bugs
====

	Containers are not supported as input to functions.

	``using`` directive only takes names, not function prototypes;

	Constructor try blocks are not recognized.

	Function exception specifications are not used.

	Function pointers are not supported.

	Wrappy finds the ``operator<<(``\ ?, *type*\ ``)`` form and
	trys to create a __rlshift__ operator for unwrapped ?.

	All of the clauses of an ``#if``* must be in the same scope
	(*e.g.*, if the ``#endif`` is inside a class declaration, then
	the corresponding ``#if``\* must be too).

	And more....

Python Usage
============

	To find out if the underlying C++ object has been deleted (for
	C++ classes that subclass from wrappy::Obj), use:

		``obj.__destroyed__``

	(TODO: change this)


Generated Output
================

	The generated output uses the offsetof macro for non-POD types
	(actually for fields of singly inherited classes).  This is
	required for communicating with the Python C interface.  While
	this requires a diagnostic from a conforming C++ compiler, the
	code should work as the fields do have fixed offsets.

	The workaround for the GNU C++ compiler is to add the:
	-Wno-invalid-offsetof flags to suppress the warning.


Example
=======

	Example command line usage::

		wrappy -N example -n example example.h


	Example input file::

		namespace example {

		class Info {
			// #include "Example.h"
		public:
			....
		};

		typedef std::vector<Info *> InfoList;

		class DB {
			// #include "Example.h"
		public:
			// infos will be an attribute
			void infos(/*OUT*/ const InfoList *infolist) const;
			void setInfos(const InfoList &infolist);
		};
