Exceptions thrown by standard C++ library:
	base_alloc, bas_cast, bad_typeid, bad_exception,
	out_of_range, invalid_argument, overflow_error, ios_base::failure,
	length_error, logic_error, ios_base::failure


bad_alloc: PyExc_MemoryError

	C++: Objects of class bad_alloc are thrown when the implementation
	cannot allocate storage.
	Python: Raised when an operation runs out of memory but the situation
	may still be rescued (by deleting some objects).

domain_error(logic_error):

	C++: Objects of class domain_error are thrown when a domain error
	occurs.
	Python: no equivalent.

invalid_argument(logic_error): PyExc_TypeError

	C++: Objects of class invalid_argument are thrown when a parameter
	is invalid.
	Python: Raised when an operation or function is applied to an object
	of inappropriate type.

length_error(logic_error): PyExc_MemoryError

	C++: Objects of class length_error are thrown when a container
	operation would create a container with a number of elements
	that exceed its maximum size.
	Python: see bad_alloc.

logic_error: PyExc_ValueError

	C++: Objects of class logic_error or a derived class are thrown when
	the condition causing the error could have been detected by the
	client before calling the failing code; that is, the client did
	not assert preconditions.
	Python: Raised when a built-in operation or function receives an
	argument that has the right type but an inappropriate value, and
	the situation is not described by a more precise exception such
	as IndexError.

out_of_range(logic_error): PyExc_IndexError

	C++: Objects of class out_of_range are thrown when a parameter is
	outside the valid range.
	Python: Raised when a sequence subscript is out of range. (Slice
	indices are silently truncated to fall in the allowed range; if
	an index is not a plain integer, TypeError is raised.)

overflow_error(runtime_error): PyExc_OverflowError

	C++: Objects of class overflow_error are thrown when an arithmetic
	overflow is encountered.
	Python: Raised when the result of an arithmetic operation is too
	large to be represented. 

range_error(runtime_error):

	C++: Objects of class range_error are thrown if the implementation
	encounters a range error.
	Python: no equivalent.

runtime_error: (use module's error)

	C++: Objects of class runtime_error or a derived class are thrown
	when the error results from a condition that the client could
	not have tested before calling the failing code.
	Python: could use PyExc_RuntimeError, but use module's error instead.

underflow_error(runtime_error):

	C++: Objects of class underflow_error are thrown when an arithmetic
	underflow is encountered.
	Python: no equivalent.

ios_base::failure: PyExe_IOError

	C++: The class failure defines the base class for the types of all
	objects thrown as exceptions, by functions in the iostreams library,
	to report errors detected during stream buffer operations.
	Python: I/O operation failed.
