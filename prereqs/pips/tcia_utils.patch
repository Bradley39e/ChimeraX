--- tcia_utils/nbia.py.orig	2023-03-13 23:28:09
+++ tcia_utils/nbia.py	2023-03-13 23:28:35
@@ -12,8 +12,6 @@
 import matplotlib.pyplot as plt
 import pydicom
 import numpy as np
-from ipywidgets.widgets import *
-import ipywidgets as widgets
 
 class StopExecution(Exception):
     def _render_traceback_(self):
@@ -45,7 +43,8 @@
                        "getSeriesSize", "getUpdatedSeries"]
     advancedEndpoints = ["getModalityValuesAndCounts", "getBodyPartValuesAndCounts",
                          "getDicomTags", "getSeriesMetadata2", "getCollectionOrSeriesForDOI",
-                         "getCollectionValuesAndCounts"]
+                         "getCollectionValuesAndCounts", "getCollectionDescriptions",
+                         "getSimpleSearchWithModalityAndBodyPartPaged"]
 
     if not endpoint in searchEndpoints and not endpoint in advancedEndpoints:
         _log.error(
@@ -244,7 +243,17 @@
         _log.error(errt)
     except requests.exceptions.RequestException as err:
         _log.error(err)
+
+####### getCollectionDescriptions function
+# Get HTML-formatted descriptions of collections and their DOIs
+
+def getCollectionDescriptions(api_url = "", format = ""):
+    endpoint = "getCollectionDescriptions"
+    options = {}
 
+    data = queryData(endpoint, options, api_url, format)
+    return data
+
 ####### getCollections function
 # Gets a list of collections from a specified api_url
 
@@ -765,6 +774,57 @@
     data = queryData(endpoint, options, api_url, format)
     return data
 
+def getSimpleSearchWithModalityAndBodyPartPaged(api_url = "", collection = "", format=""):
+    endpoint = "getSimpleSearchWithModalityAndBodyPartPaged"
+    options = {}
+    options['criteriaType0'] = "CollectionCriteria"
+    options['value0'] = collection
+    options['sortField'] = 'subject'
+    options['sortDirection'] = 'ascending'
+    options['start'] = 0
+    options['size'] = 10
+
+    # set base_url
+    base_url = setApiUrl(endpoint, api_url)
+
+    # full url
+    url = base_url + endpoint
+    _log.info(f'Calling... {url}')
+
+    # get data & handle any request.post() errors
+    try:
+        if api_url == "nlst":
+            metadata = requests.post(url, headers = nlst_api_call_headers, data = options)
+        else:
+            metadata = requests.post(url, headers = api_call_headers, data = options)
+
+        metadata.raise_for_status()        # check for empty results and format output
+        if metadata.text and metadata.text != "[]":
+            metadata = metadata.json()
+            # format the output (optional)
+            if format == "df":
+                df = pd.DataFrame(metadata)
+                return df
+            elif format == "csv":
+                df = pd.DataFrame(metadata)
+                df.to_csv(endpoint + ".csv")
+                _log.info("CSV saved to: " + endpoint + ".csv")
+                return df
+            else:
+                return metadata
+        else:
+            _log.info("No results found.")
+
+    except requests.exceptions.HTTPError as errh:
+        _log.error(errh)
+    except requests.exceptions.ConnectionError as errc:
+        _log.error(errc)
+    except requests.exceptions.Timeout as errt:
+        _log.error(errt)
+    except requests.exceptions.RequestException as err:
+        _log.error(err)
+
+
 ####### getModalityCounts function (Advanced)
 # Get counts of Modality metadata from Advanced API
 # Allows filtering by collection and bodyPart
@@ -1034,6 +1094,7 @@
 #   provided since this is where downloadSeries() saves data
 
 def viewSeries(seriesUid = "", path = ""):
+    from ipywidgets import interact
 
     # set path where downloadSeries() saves the data if seriesUid is provided
     if seriesUid != "":
