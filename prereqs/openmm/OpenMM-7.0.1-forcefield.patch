*** python/simtk/openmm/app/forcefield.py.orig	Tue May 24 23:55:16 2016
--- python/simtk/openmm/app/forcefield.py	Thu Oct 27 16:01:44 2016
***************
*** 543,549 ****
                  raise ValueError('%s: No parameters defined for atom type %s' % (self.forceName, t))
  
  
!     def _getResidueTemplateMatches(self, res, bondedToAtom):
          """Return the residue template matches, or None if none are found.
  
          Parameters
--- 543,549 ----
                  raise ValueError('%s: No parameters defined for atom type %s' % (self.forceName, t))
  
  
!     def _getResidueTemplateMatches(self, res, bondedToAtom, ignoreMissingExternalBonds=False):
          """Return the residue template matches, or None if none are found.
  
          Parameters
***************
*** 566,576 ****
--- 566,584 ----
          matches = None
          signature = _createResidueSignature([atom.element for atom in res.atoms()])
          if signature in self._templateSignatures:
+             # Search through once including external bonds
              for t in self._templateSignatures[signature]:
                  matches = _matchResidue(res, t, bondedToAtom)
                  if matches is not None:
                      template = t
                      break
+             # If nothing fits and we're allowing missing external bonds, search again
+             if matches is None and ignoreMissingExternalBonds:
+                 for t in self._templateSignatures[signature]:
+                     matches = _matchResidue(res, t, bondedToAtom, ignoreMissingExternalBonds)
+                     if matches is not None:
+                         template = t
+                         break
          return [template, matches]
  
      def _buildBondedToAtomList(self, topology):
***************
*** 703,709 ****
          return [templates, unique_unmatched_residues]
  
      def createSystem(self, topology, nonbondedMethod=NoCutoff, nonbondedCutoff=1.0*unit.nanometer,
!                      constraints=None, rigidWater=True, removeCMMotion=True, hydrogenMass=None, **args):
          """Construct an OpenMM System representing a Topology with this force field.
  
          Parameters
--- 711,718 ----
          return [templates, unique_unmatched_residues]
  
      def createSystem(self, topology, nonbondedMethod=NoCutoff, nonbondedCutoff=1.0*unit.nanometer,
!                      constraints=None, rigidWater=True, removeCMMotion=True, hydrogenMass=None,
!                      ignoreMissingExternalBonds=False, **args):
          """Construct an OpenMM System representing a Topology with this force field.
  
          Parameters
***************
*** 727,732 ****
--- 736,744 ----
              The mass to use for hydrogen atoms bound to heavy atoms.  Any mass
              added to a hydrogen is subtracted from the heavy atom to keep
              their total mass the same.
+         ignoreMissingExternalBonds: boolean=False
+             Accept residues with one or more missing ExternalBonds. Recommended to
+             only use this if these residues are to be fixed in space.
          args
               Arbitrary additional keyword arguments may also be specified.
               This allows extra parameters to be specified that are specific to
***************
*** 766,772 ****
          for chain in topology.chains():
              for res in chain.residues():
                  # Attempt to match one of the existing templates.
!                 [template, matches] = self._getResidueTemplateMatches(res, bondedToAtom)
                  if matches is None:
                      # No existing templates match.  Try any registered residue template generators.
                      for generator in self._templateGenerators:
--- 778,784 ----
          for chain in topology.chains():
              for res in chain.residues():
                  # Attempt to match one of the existing templates.
!                 [template, matches] = self._getResidueTemplateMatches(res, bondedToAtom, ignoreMissingExternalBonds)
                  if matches is None:
                      # No existing templates match.  Try any registered residue template generators.
                      for generator in self._templateGenerators:
***************
*** 984,990 ****
          s += element.symbol+str(count)
      return s
  
! def _matchResidue(res, template, bondedToAtom):
      """Determine whether a residue matches a template and return a list of corresponding atoms.
  
      Parameters
--- 996,1002 ----
          s += element.symbol+str(count)
      return s
  
! def _matchResidue(res, template, bondedToAtom, ignoreMissingExternalBonds = False):
      """Determine whether a residue matches a template and return a list of corresponding atoms.
  
      Parameters
***************
*** 1025,1037 ****
  
      residueTypeCount = {}
      for i, atom in enumerate(atoms):
!         key = (atom.element, len(bondedTo[i]), externalBonds[i])
          if key not in residueTypeCount:
              residueTypeCount[key] = 1
          residueTypeCount[key] += 1
      templateTypeCount = {}
      for i, atom in enumerate(template.atoms):
!         key = (atom.element, len(atom.bondedTo), atom.externalBonds)
          if key not in templateTypeCount:
              templateTypeCount[key] = 1
          templateTypeCount[key] += 1
--- 1037,1055 ----
  
      residueTypeCount = {}
      for i, atom in enumerate(atoms):
!         if ignoreMissingExternalBonds:
!             key = (atom.element, len(bondedTo[i]))
!         else:
!             key = (atom.element, len(bondedTo[i]), externalBonds[i])
          if key not in residueTypeCount:
              residueTypeCount[key] = 1
          residueTypeCount[key] += 1
      templateTypeCount = {}
      for i, atom in enumerate(template.atoms):
!         if ignoreMissingExternalBonds:
!             key = (atom.element, len(atom.bondedTo))
!         else:
!             key = (atom.element, len(atom.bondedTo), atom.externalBonds)
          if key not in templateTypeCount:
              templateTypeCount[key] = 1
          templateTypeCount[key] += 1
***************
*** 1040,1051 ****
  
      # Recursively match atoms.
  
!     if _findAtomMatches(atoms, template, bondedTo, externalBonds, matches, hasMatch, 0):
          return matches
      return None
  
  
! def _findAtomMatches(atoms, template, bondedTo, externalBonds, matches, hasMatch, position):
      """This is called recursively from inside _matchResidue() to identify matching atoms."""
      if position == len(atoms):
          return True
--- 1058,1069 ----
  
      # Recursively match atoms.
  
!     if _findAtomMatches(atoms, template, bondedTo, externalBonds, matches, hasMatch, 0, ignoreMissingExternalBonds):
          return matches
      return None
  
  
! def _findAtomMatches(atoms, template, bondedTo, externalBonds, matches, hasMatch, position, ignoreMissingExternalBonds=False):
      """This is called recursively from inside _matchResidue() to identify matching atoms."""
      if position == len(atoms):
          return True
***************
*** 1053,1059 ****
      name = atoms[position].name
      for i in range(len(atoms)):
          atom = template.atoms[i]
!         if ((atom.element is not None and atom.element == elem) or (atom.element is None and atom.name == name)) and not hasMatch[i] and len(atom.bondedTo) == len(bondedTo[position]) and atom.externalBonds == externalBonds[position]:
              # See if the bonds for this identification are consistent
  
              allBondsMatch = all((bonded > position or matches[bonded] in atom.bondedTo for bonded in bondedTo[position]))
--- 1071,1079 ----
      name = atoms[position].name
      for i in range(len(atoms)):
          atom = template.atoms[i]
!         if ((atom.element is not None and atom.element == elem) or (atom.element is None and atom.name == name)) \
!                 and not hasMatch[i] and len(atom.bondedTo) == len(bondedTo[position]) and \
!                 (atom.externalBonds == externalBonds[position] or ignoreMissingExternalBonds):
              # See if the bonds for this identification are consistent
  
              allBondsMatch = all((bonded > position or matches[bonded] in atom.bondedTo for bonded in bondedTo[position]))
***************
*** 1062,1068 ****
  
                  matches[position] = i
                  hasMatch[i] = True
!                 if _findAtomMatches(atoms, template, bondedTo, externalBonds, matches, hasMatch, position+1):
                      return True
                  hasMatch[i] = False
      return False
--- 1082,1088 ----
  
                  matches[position] = i
                  hasMatch[i] = True
!                 if _findAtomMatches(atoms, template, bondedTo, externalBonds, matches, hasMatch, position+1,ignoreMissingExternalBonds):
                      return True
                  hasMatch[i] = False
      return False
