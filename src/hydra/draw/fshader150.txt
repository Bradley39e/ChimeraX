#version 150

#ifdef USE_TEXTURE_MASK

in vec2 tex_coord;
uniform sampler2D tex2d;
uniform vec4 color;
out vec4 frag_color;
void main (void)
{
  float f = ceil(texture(tex2d, tex_coord).r);
  frag_color = color * f;
}

#else

#ifdef USE_LIGHTING
uniform vec3 key_light_position;
uniform vec3 key_light_diffuse_color;
uniform vec3 key_light_specular_color;
uniform float key_light_specular_exponent;

uniform vec3 fill_light_position;
uniform vec3 fill_light_diffuse_color;

uniform vec3 ambient_color;

in vec3 N;
in vec3 v;

#ifdef USE_DEPTH_CUE
uniform float depth_cue_distance;
uniform float depth_cue_darkest;
#endif

#endif

#ifdef USE_VERTEX_COLORS
in vec4 color;
#else
uniform vec4 color;
#endif

#ifdef USE_TEXTURE_2D
in vec2 tex_coord;
uniform sampler2D tex2d;
#endif

#ifdef USE_TEXTURE_WARP
uniform vec2 warp_center;
uniform vec4 radial_warp;
#endif

out vec4 frag_color;

void main (void)
{
#ifdef USE_TEXTURE_2D
#ifdef USE_TEXTURE_WARP
  float ds = tex_coord.s - warp_center.s;
  float dt = tex_coord.t - warp_center.t;
  float r2 = 4*ds*ds + 6.25*dt*dt;
  float f = radial_warp[0] + r2*(radial_warp[1] + r2*(radial_warp[2] + r2*radial_warp[3]));
  vec4 fcolor = texture(tex2d, vec2(warp_center.s+f*ds,warp_center.t+f*dt)) * color;
#else
  vec4 fcolor = texture(tex2d, tex_coord) * color;
#endif
#else
  vec4 fcolor = color;
#endif

#ifdef USE_LIGHTING
  vec3 N1 = normalize(N);
  vec3 L = normalize(key_light_position);  // Light at infinity.
  vec3 Lf = normalize(fill_light_position); // Light at infinity.
  vec3 E = normalize(-v);      // In eye coordinates eye position is (0,0,0).
  N1 *= (gl_FrontFacing ? 1.0 : -1.0);  // Two sided lighting
  vec3 R = normalize(-reflect(L,N1)); 

  // diffuse
  vec3 Idiff = fcolor.rgb * (key_light_diffuse_color * max(dot(N1,L),0.0)
                         + fill_light_diffuse_color * max(dot(N1,Lf),0.0));

  // specular
  vec3 Ispec = key_light_specular_color
                  * pow(max(dot(R,E),0.0),0.3*key_light_specular_exponent);

  // scene
  vec3 Iscene = fcolor.rgb * ambient_color;

  // total color
  vec3 Ifrag = Iscene + Idiff + Ispec;

#ifdef USE_DEPTH_CUE
  float dim = max(depth_cue_darkest, 1.0 / max(1.0, -dot(E,v)/depth_cue_distance));
  Ifrag *= dim;
#endif

#else
  vec3 Ifrag = fcolor.rgb;
#endif

  // transparency
  float a = fcolor.a;
#ifdef USE_LIGHTING
  a = 1.0 - pow(max(1.0-a,0.0), 1.0/max(abs(N1.z),0.01));
#endif

  // final color
  frag_color = vec4(Ifrag, a);
}

#endif	// USE_IMAGE_BLEND
