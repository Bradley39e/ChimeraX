#version 330 core

in vec2 texCoords;
out vec4 fragColor;

uniform sampler2D screenTex;

#ifdef USE_TEXTURE_2D

// Show quilt for debugging
void main()
{
  fragColor = texture(screenTex, texCoords.xy);
}

#else

// Calibration values
uniform vec2 pitch;
uniform float center;
uniform float subp;
uniform int ri;
uniform int bi;

// Quilt settings
uniform vec3 tile;		// num columns, num rows, num tiles
uniform vec2 texture_region;
uniform vec2 adjust_aspect;
uniform float flip_vertical;

uniform int debug;

vec2 texArr(vec3 uvz)
{
  // decide which section to take from based on the z.
  float z = floor(uvz.z * tile.z);
  float x = (mod(z, tile.x) + uvz.x) / tile.x;
  float y = (floor(z / tile.x) + uvz.y) / tile.y;
  return vec2(x, y) * texture_region.xy;
}

void main()
{
  vec3 nuv = vec3(texCoords.xy, 0.0);
  nuv.xy = adjust_aspect.xy * (nuv.xy - 0.5) + 0.5;
  vec4 rgb[3];
  for (int i=0; i < 3; i++)
  {
    nuv.z = mod(flip_vertical * ((texCoords.x + i * subp)*pitch.x + texCoords.y*pitch.y - center), 1.0);
    rgb[i] = texture(screenTex, texArr(nuv));
  }
  fragColor = vec4(rgb[ri].r, rgb[1].g, rgb[bi].b, 1.0);
}

#endif
