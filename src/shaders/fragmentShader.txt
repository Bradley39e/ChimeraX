#version 120

#define USE_TWO_SIDED_LIGHTING 1
#define USE_ANGLE_DEPENDENT_TRANSPARENCY 1
#define USE_FOG 1

uniform float fogEnabled;
varying vec3 N;
varying vec3 v;

void main (void)
{
  const int kl = 1;  // Chimera key light is 1.
  const int fl = 0;  // Chimera fill light is 0.
  const int bl = 2;  // Chimera back light is 2.
  vec3 N1 = normalize(N);
  vec3 L = normalize(gl_LightSource[kl].position.xyz);  // Light at infinity.
  vec3 Lf = normalize(gl_LightSource[fl].position.xyz); // Light at infinity.
  vec3 Lb = normalize(gl_LightSource[bl].position.xyz); // Light at infinity.
  vec3 E = normalize(-v);      // In eye coordinates eye position is (0,0,0).
#ifdef USE_TWO_SIDED_LIGHTING
  N1 *= (gl_FrontFacing ? 1.0 : -1.0);
#else
  if (!gl_FrontFacing) discard;
#endif
  vec3 R = normalize(-reflect(L,N1)); 

  // diffuse
  vec4 Idiff = gl_Color * (gl_LightSource[kl].diffuse * max(dot(N1,L),0.0)
                         + gl_LightSource[fl].diffuse * max(dot(N1,Lf),0.0)
                         + gl_LightSource[bl].diffuse * max(dot(N1,Lb),0.0));

  // specular
  vec4 Ispec = gl_FrontLightProduct[kl].specular 
                  * pow(max(dot(R,E),0.0),0.3*gl_FrontMaterial.shininess);

  // scene
  vec4 Iscene = gl_Color * gl_LightModel.ambient;

  // transparency
  float a = gl_Color.a;
#ifdef USE_ANGLE_DEPENDENT_TRANSPARENCY
  a = 1.0 - pow(max(1.0-a,0.0), 1.0/max(abs(N1.z),0.01));
#endif

  // total color
  vec3 Ifrag = Iscene.rgb + Idiff.rgb + Ispec.rgb;

#ifdef USE_FOG
  // fog
  float fog = clamp((gl_FogFragCoord - gl_Fog.start) * gl_Fog.scale, 0.0, 1.0);
  Ifrag = mix(Ifrag, gl_Fog.color.rgb, fogEnabled * fog);
#endif

  // final color
  gl_FragColor = vec4(Ifrag, a);
}
