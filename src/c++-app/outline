// buffer/array based

	// support interleaved arrays? No.
	// combine glBufferData and glVertexAttributePointer into one call
id = bufferData(array/element_array, data_size, data_type, data_length, data)
	data_length in bytes = data_length * data_size * "sizeof"(data_type)
subbufferData(id, data_length, data, offset)
id = singleton(data_size, data_type, data)

// flat, state-sorting, scene graph of arrays and instances

add_object(shader_program, { attribute: buffer/singleton id })
	sort by program, then attribute
	automatic instancing? -- 

// LOD primitives: ignore initially

// selection highlights

selection(list_of_objects)

// translucency

tranlucent(list_of_objects)

// matrices

// shaders

// culling: no

The back-end will:

// prepare the arrays of:

  - vertices
  - colors
  - matrices
  - et. al.

// selection and translucency annotations

// prepare shaders
